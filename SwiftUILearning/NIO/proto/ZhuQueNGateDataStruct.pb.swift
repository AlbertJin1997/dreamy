// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ZhuQueNGateDataStruct.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Author      : meiyu024717@gtjas.com
// Version     : ZQDS_V0.1
// Update      : 2024/10/30
// Discription : ZhuQue 朱雀消息平台基本数据结构

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 响应接口基本信息, 对应 Request/Response
struct Com_Gtjaqh_Zhuque_Ngate_RspInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 是否错误响应
  var isError: Bool = false

  /// 具体错误代码
  var errorID: String = String()

  /// 错误信息
  var errorMsg: String = String()

  /// 数据源
  var dataSrc: Com_Gtjaqh_Zhuque_DataSrcType = .dstDefault

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 回报基本信息，对应 Return
struct Com_Gtjaqh_Zhuque_Ngate_RtnInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 数据源
  var dataSrc: Com_Gtjaqh_Zhuque_DataSrcType = .dstDefault

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 消息明细
struct Com_Gtjaqh_Zhuque_Ngate_NotificationDetail: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 消息唯一标识
  var notificationID: Int64 = 0

  /// 主题id
  var themeID: Int32 = 0

  /// 主题url
  var themeURL: String = String()

  /// 消息群组 (暂不启用)
  var groupID: Int32 = 0

  /// 认证类型 (暂不启用)
  var userVerificationType: Com_Gtjaqh_Zhuque_UserVerificationTypeType = .uvttDefault

  /// 认证识别标识 (暂不启用)
  var userVerificationID: String = String()

  /// 消息内容
  var content: String = String()

  /// 消息是否需要响应 (暂不启用)
  var isAckRequired: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// 主题theme明细
struct Com_Gtjaqh_Zhuque_Ngate_ThemeDetail: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 主题唯一标识
  var theme: Int32 = 0

  /// 推送类型
  var pushType: Com_Gtjaqh_Zhuque_PushTypeType = .pttDefault

  /// 消息是否需要确认
  var isAckRequired: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.gtjaqh.zhuque.ngate"

extension Com_Gtjaqh_Zhuque_Ngate_RspInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RspInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "is_error"),
    2: .standard(proto: "error_id"),
    3: .standard(proto: "error_msg"),
    4: .standard(proto: "data_src"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.isError) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.errorID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.errorMsg) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self.dataSrc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.isError != false {
      try visitor.visitSingularBoolField(value: self.isError, fieldNumber: 1)
    }
    if !self.errorID.isEmpty {
      try visitor.visitSingularStringField(value: self.errorID, fieldNumber: 2)
    }
    if !self.errorMsg.isEmpty {
      try visitor.visitSingularStringField(value: self.errorMsg, fieldNumber: 3)
    }
    if self.dataSrc != .dstDefault {
      try visitor.visitSingularEnumField(value: self.dataSrc, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_RspInfo, rhs: Com_Gtjaqh_Zhuque_Ngate_RspInfo) -> Bool {
    if lhs.isError != rhs.isError {return false}
    if lhs.errorID != rhs.errorID {return false}
    if lhs.errorMsg != rhs.errorMsg {return false}
    if lhs.dataSrc != rhs.dataSrc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_RtnInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RtnInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "data_src"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self.dataSrc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.dataSrc != .dstDefault {
      try visitor.visitSingularEnumField(value: self.dataSrc, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_RtnInfo, rhs: Com_Gtjaqh_Zhuque_Ngate_RtnInfo) -> Bool {
    if lhs.dataSrc != rhs.dataSrc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_NotificationDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotificationDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "notification_id"),
    2: .standard(proto: "theme_id"),
    3: .standard(proto: "theme_url"),
    4: .standard(proto: "group_id"),
    5: .standard(proto: "user_verification_type"),
    6: .standard(proto: "user_verification_id"),
    7: .same(proto: "content"),
    8: .standard(proto: "is_ack_required"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt64Field(value: &self.notificationID) }()
      case 2: try { try decoder.decodeSingularInt32Field(value: &self.themeID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.themeURL) }()
      case 4: try { try decoder.decodeSingularInt32Field(value: &self.groupID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self.userVerificationType) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.userVerificationID) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.content) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self.isAckRequired) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.notificationID != 0 {
      try visitor.visitSingularInt64Field(value: self.notificationID, fieldNumber: 1)
    }
    if self.themeID != 0 {
      try visitor.visitSingularInt32Field(value: self.themeID, fieldNumber: 2)
    }
    if !self.themeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.themeURL, fieldNumber: 3)
    }
    if self.groupID != 0 {
      try visitor.visitSingularInt32Field(value: self.groupID, fieldNumber: 4)
    }
    if self.userVerificationType != .uvttDefault {
      try visitor.visitSingularEnumField(value: self.userVerificationType, fieldNumber: 5)
    }
    if !self.userVerificationID.isEmpty {
      try visitor.visitSingularStringField(value: self.userVerificationID, fieldNumber: 6)
    }
    if !self.content.isEmpty {
      try visitor.visitSingularStringField(value: self.content, fieldNumber: 7)
    }
    if self.isAckRequired != false {
      try visitor.visitSingularBoolField(value: self.isAckRequired, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_NotificationDetail, rhs: Com_Gtjaqh_Zhuque_Ngate_NotificationDetail) -> Bool {
    if lhs.notificationID != rhs.notificationID {return false}
    if lhs.themeID != rhs.themeID {return false}
    if lhs.themeURL != rhs.themeURL {return false}
    if lhs.groupID != rhs.groupID {return false}
    if lhs.userVerificationType != rhs.userVerificationType {return false}
    if lhs.userVerificationID != rhs.userVerificationID {return false}
    if lhs.content != rhs.content {return false}
    if lhs.isAckRequired != rhs.isAckRequired {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_ThemeDetail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ThemeDetail"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "theme"),
    2: .standard(proto: "push_type"),
    3: .standard(proto: "is_ack_required"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularInt32Field(value: &self.theme) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.pushType) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.isAckRequired) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.theme != 0 {
      try visitor.visitSingularInt32Field(value: self.theme, fieldNumber: 1)
    }
    if self.pushType != .pttDefault {
      try visitor.visitSingularEnumField(value: self.pushType, fieldNumber: 2)
    }
    if self.isAckRequired != false {
      try visitor.visitSingularBoolField(value: self.isAckRequired, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_ThemeDetail, rhs: Com_Gtjaqh_Zhuque_Ngate_ThemeDetail) -> Bool {
    if lhs.theme != rhs.theme {return false}
    if lhs.pushType != rhs.pushType {return false}
    if lhs.isAckRequired != rhs.isAckRequired {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
