// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ZhuQueNGateTask.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

// Author      : meiyu024717@gtjas.com
// Version     : ZQNGT_V0.1
// Update      : 2024/10/30
// Discription : ZhuQue Notification Gate Platform 朱雀通知网关平台接口

import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// 统一错误响应回报
struct Com_Gtjaqh_Zhuque_Ngate_SystemUnacceptableResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应接口基本信息
  var rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo {
    get {return _rspInfo ?? Com_Gtjaqh_Zhuque_Ngate_RspInfo()}
    set {_rspInfo = newValue}
  }
  /// Returns true if `rspInfo` has been explicitly set.
  var hasRspInfo: Bool {return self._rspInfo != nil}
  /// Clears the value of `rspInfo`. Subsequent reads from it will return its default value.
  mutating func clearRspInfo() {self._rspInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo? = nil
}

/// 心跳包 (1)
struct Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// empty
struct Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ZID 申请 (2)
struct Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 终端类型 (iOS/android/PC)
  var clientPlatform: String = String()

  /// 终端时间
  var clientTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应接口基本信息
  var rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo {
    get {return _rspInfo ?? Com_Gtjaqh_Zhuque_Ngate_RspInfo()}
    set {_rspInfo = newValue}
  }
  /// Returns true if `rspInfo` has been explicitly set.
  var hasRspInfo: Bool {return self._rspInfo != nil}
  /// Clears the value of `rspInfo`. Subsequent reads from it will return its default value.
  mutating func clearRspInfo() {self._rspInfo = nil}

  /// zid
  var zid: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo? = nil
}

/// 基本信息采集，规定长连接建立后需首先调用 (10)
struct Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 设备号
  var deviceID: String = String()

  /// 手机系统型号
  var xOsVersion: String = String()

  /// 终端应用版本
  var appVersion: String = String()

  /// zhuque设备唯一标识?
  var zid: String = String()

  /// 终端消息快照 (暂不启用)
  var subSnapshot: String = String()

  /// 终端时间 (仅作为入口记录)
  var clientTime: String = String()

  /// 其他记录信息(仅记录)
  var reserve: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应接口基本信息
  var rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo {
    get {return _rspInfo ?? Com_Gtjaqh_Zhuque_Ngate_RspInfo()}
    set {_rspInfo = newValue}
  }
  /// Returns true if `rspInfo` has been explicitly set.
  var hasRspInfo: Bool {return self._rspInfo != nil}
  /// Clears the value of `rspInfo`. Subsequent reads from it will return its default value.
  mutating func clearRspInfo() {self._rspInfo = nil}

  /// 服务端主机时间
  var serverTime: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo? = nil
}

/// 主题订阅/取消订阅请求 (50)
struct Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 订阅 theme_url
  var themeURL: String = String()

  /// 主题订阅类型
  var themeURLType: Com_Gtjaqh_Zhuque_ThemeUrlTypeType = .tuttDefault

  /// 订阅标识(true:订阅;false:取消订阅)
  var subFlag: Bool = false

  /// 订阅消息流数据序号(填0采用服务端缓存) --- (暂不启用)
  var subSnapshot: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 响应接口基本信息
  var rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo {
    get {return _rspInfo ?? Com_Gtjaqh_Zhuque_Ngate_RspInfo()}
    set {_rspInfo = newValue}
  }
  /// Returns true if `rspInfo` has been explicitly set.
  var hasRspInfo: Bool {return self._rspInfo != nil}
  /// Clears the value of `rspInfo`. Subsequent reads from it will return its default value.
  mutating func clearRspInfo() {self._rspInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rspInfo: Com_Gtjaqh_Zhuque_Ngate_RspInfo? = nil
}

/// 消息回报 (7000)
struct Com_Gtjaqh_Zhuque_Ngate_NotifyReturn: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// 回报基本信息
  var rtnInfo: Com_Gtjaqh_Zhuque_Ngate_RtnInfo {
    get {return _rtnInfo ?? Com_Gtjaqh_Zhuque_Ngate_RtnInfo()}
    set {_rtnInfo = newValue}
  }
  /// Returns true if `rtnInfo` has been explicitly set.
  var hasRtnInfo: Bool {return self._rtnInfo != nil}
  /// Clears the value of `rtnInfo`. Subsequent reads from it will return its default value.
  mutating func clearRtnInfo() {self._rtnInfo = nil}

  /// 消息明细
  var notification: Com_Gtjaqh_Zhuque_Ngate_NotificationDetail {
    get {return _notification ?? Com_Gtjaqh_Zhuque_Ngate_NotificationDetail()}
    set {_notification = newValue}
  }
  /// Returns true if `notification` has been explicitly set.
  var hasNotification: Bool {return self._notification != nil}
  /// Clears the value of `notification`. Subsequent reads from it will return its default value.
  mutating func clearNotification() {self._notification = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rtnInfo: Com_Gtjaqh_Zhuque_Ngate_RtnInfo? = nil
  fileprivate var _notification: Com_Gtjaqh_Zhuque_Ngate_NotificationDetail? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.gtjaqh.zhuque.ngate"

extension Com_Gtjaqh_Zhuque_Ngate_SystemUnacceptableResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SystemUnacceptableResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rsp_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rspInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rspInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SystemUnacceptableResponse, rhs: Com_Gtjaqh_Zhuque_Ngate_SystemUnacceptableResponse) -> Bool {
    if lhs._rspInfo != rhs._rspInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SystemHeartbeatRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatRequest, rhs: Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatRequest) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SystemHeartbeatResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    // Load everything into unknown fields
    while try decoder.nextFieldNumber() != nil {}
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatResponse, rhs: Com_Gtjaqh_Zhuque_Ngate_SystemHeartbeatResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SystemZIDApplyRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "client_platform"),
    2: .standard(proto: "client_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.clientPlatform) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.clientTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.clientPlatform.isEmpty {
      try visitor.visitSingularStringField(value: self.clientPlatform, fieldNumber: 1)
    }
    if !self.clientTime.isEmpty {
      try visitor.visitSingularStringField(value: self.clientTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyRequest, rhs: Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyRequest) -> Bool {
    if lhs.clientPlatform != rhs.clientPlatform {return false}
    if lhs.clientTime != rhs.clientTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SystemZIDApplyResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rsp_info"),
    2: .same(proto: "zid"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rspInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.zid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rspInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.zid.isEmpty {
      try visitor.visitSingularStringField(value: self.zid, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyResponse, rhs: Com_Gtjaqh_Zhuque_Ngate_SystemZIDApplyResponse) -> Bool {
    if lhs._rspInfo != rhs._rspInfo {return false}
    if lhs.zid != rhs.zid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SystemInfoRegisterRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "device_id"),
    2: .standard(proto: "x_os_version"),
    3: .standard(proto: "app_version"),
    4: .same(proto: "zid"),
    5: .standard(proto: "sub_snapshot"),
    6: .standard(proto: "client_time"),
    7: .same(proto: "reserve"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.xOsVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.appVersion) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.zid) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.subSnapshot) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.clientTime) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.reserve) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.deviceID.isEmpty {
      try visitor.visitSingularStringField(value: self.deviceID, fieldNumber: 1)
    }
    if !self.xOsVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.xOsVersion, fieldNumber: 2)
    }
    if !self.appVersion.isEmpty {
      try visitor.visitSingularStringField(value: self.appVersion, fieldNumber: 3)
    }
    if !self.zid.isEmpty {
      try visitor.visitSingularStringField(value: self.zid, fieldNumber: 4)
    }
    if !self.subSnapshot.isEmpty {
      try visitor.visitSingularStringField(value: self.subSnapshot, fieldNumber: 5)
    }
    if !self.clientTime.isEmpty {
      try visitor.visitSingularStringField(value: self.clientTime, fieldNumber: 6)
    }
    if !self.reserve.isEmpty {
      try visitor.visitSingularStringField(value: self.reserve, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterRequest, rhs: Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterRequest) -> Bool {
    if lhs.deviceID != rhs.deviceID {return false}
    if lhs.xOsVersion != rhs.xOsVersion {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.zid != rhs.zid {return false}
    if lhs.subSnapshot != rhs.subSnapshot {return false}
    if lhs.clientTime != rhs.clientTime {return false}
    if lhs.reserve != rhs.reserve {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SystemInfoRegisterResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rsp_info"),
    2: .standard(proto: "server_time"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rspInfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.serverTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rspInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.serverTime.isEmpty {
      try visitor.visitSingularStringField(value: self.serverTime, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterResponse, rhs: Com_Gtjaqh_Zhuque_Ngate_SystemInfoRegisterResponse) -> Bool {
    if lhs._rspInfo != rhs._rspInfo {return false}
    if lhs.serverTime != rhs.serverTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeThemeRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "theme_url"),
    2: .standard(proto: "theme_url_type"),
    3: .standard(proto: "sub_flag"),
    4: .standard(proto: "sub_snapshot"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.themeURL) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self.themeURLType) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self.subFlag) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.subSnapshot) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.themeURL.isEmpty {
      try visitor.visitSingularStringField(value: self.themeURL, fieldNumber: 1)
    }
    if self.themeURLType != .tuttDefault {
      try visitor.visitSingularEnumField(value: self.themeURLType, fieldNumber: 2)
    }
    if self.subFlag != false {
      try visitor.visitSingularBoolField(value: self.subFlag, fieldNumber: 3)
    }
    if !self.subSnapshot.isEmpty {
      try visitor.visitSingularStringField(value: self.subSnapshot, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeRequest, rhs: Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeRequest) -> Bool {
    if lhs.themeURL != rhs.themeURL {return false}
    if lhs.themeURLType != rhs.themeURLType {return false}
    if lhs.subFlag != rhs.subFlag {return false}
    if lhs.subSnapshot != rhs.subSnapshot {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscribeThemeResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rsp_info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rspInfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rspInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeResponse, rhs: Com_Gtjaqh_Zhuque_Ngate_SubscribeThemeResponse) -> Bool {
    if lhs._rspInfo != rhs._rspInfo {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Com_Gtjaqh_Zhuque_Ngate_NotifyReturn: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".NotifyReturn"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "rtn_info"),
    2: .same(proto: "notification"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rtnInfo) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._notification) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rtnInfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._notification {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Com_Gtjaqh_Zhuque_Ngate_NotifyReturn, rhs: Com_Gtjaqh_Zhuque_Ngate_NotifyReturn) -> Bool {
    if lhs._rtnInfo != rhs._rtnInfo {return false}
    if lhs._notification != rhs._notification {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
